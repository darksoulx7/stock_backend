service: stocks-backend

frameworkVersion: '3'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-esbuild
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    TABLE_NAME: stocks_backend_app_table
    COGNITO_USER_POOL_ID: 
      Ref: UserPool
    COGNITO_APP_CLIENT_ID:
      Ref: UserPoolClient
    COGNITO_REGION: ${self:provider.region}

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: stocks_backend_user_pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: stocks_backend_user_pool_client
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH

    UserPoolIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: stocks_backend_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::GetAtt:
                - UserPool
                - ProviderName

    ServiceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  signUp:
    handler: src/handlers/userHandler.signUp
    events:
      - http:
          path: user/sign-up
          method: post
          cors: true

  forgotPassword:
    handler: src/handlers/userHandler.forgotPassword
    events:
      - http:
          path: user/forgot-password
          method: post
          cors: true

  resetPassword:
    handler: src/handlers/userHandler.resetPassword
    events:
      - http:
          path: user/reset-password
          method: post
          cors: true

  confirmSignUp:
    handler: src/handlers/userHandler.confirmSignUp
    events:
      - http:
          path: user/confirm-sign-up
          method: post
          cors: true

  updateUser:
    handler: src/handlers/userHandler.updateUser
    events:
      - http:
          path: user/update
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  subscribeEmail:
    handler: src/handlers/subscriptionEmailHandler.subscribeEmail
    events:
      - http:
          path: email
          method: post
          cors: true

  adminLogin:
    handler: src/handlers/adminHandler.adminLogin
    events:
      - http:
          path: admin/login
          method: post
          cors: true

  createService:
    handler: src/handlers/serviceHandler.createService
    events:
      - http:
          path: service
          method: post
          cors: true

  updateService:
    handler: src/handlers/serviceHandler.updateService
    events:
      - http:
          path: service/{id}
          method: put
          cors: true
  
  getService:
    handler: src/handlers/serviceHandler.getServiceById
    events:
      - http:
          path: service/{id}
          method: get
          cors: true

  deleteService:
    handler: src/handlers/serviceHandler.deleteService
    events:
      - http:
          path: service/{id}
          method: delete
          cors: true

  getAllServices:
    handler: src/handlers/serviceHandler.getAllServices
    events:
      - http:
          path: services
          method: get
          cors: true

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::GetAtt:
              - UserPool
              - Arn
