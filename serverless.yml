service: stocks-backend

frameworkVersion: '3'
useDotenv: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  scriptable:
    hooks:
      before:package:initialize: node src/scripts/loadEnv.js

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    TABLE_NAME: stocks_backend_app_table
    COGNITO_USER_POOL_ID: 
      Ref: UserPool
    COGNITO_CLIENT_ID:
      Ref: UserPoolClient
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_PHONE_NUMBER: ${env:TWILIO_PHONE_NUMBER} 
  iam:
    role:
      statements:
        # DynamoDB Permissions
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}

        # Cognito Permissions
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminUpdateUserAttributes
          Resource: 
            Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

        # CloudWatch Logs and Metrics Permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cloudwatch:PutMetricData
          Resource: "*"

        # S3 Full Bucket Access
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 
            - arn:aws:s3:::*
            - arn:aws:s3:::*/*

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: stocks_backend_user_pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: stocks_backend_user_pool_client
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    ServiceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

functions:
  signUp:
    handler: src/handlers/userHandler.signup
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  login:
    handler: src/handlers/userHandler.login
    events:
      - http:
          path: user/login
          method: post
          cors: true
  
  verifyUser:
    handler: src/handlers/userHandler.verifyOtp
    events:
      - http:
          path: user/verify-otp
          method: post
          cors: true

  subscribeEmail:
    handler: src/handlers/subscriptionEmailHandler.subscribeEmail
    events:
      - http:
          path: email
          method: post
          cors: true

  adminLogin:
    handler: src/handlers/adminHandler.adminLogin
    events:
      - http:
          path: admin/login
          method: post
          cors: true

  createService:
    handler: src/handlers/serviceHandler.createService
    events:
      - http:
          path: service
          method: post
          cors: true

  updateService:
    handler: src/handlers/serviceHandler.updateService
    events:
      - http:
          path: service/{id}
          method: put
          cors: true
  
  getService:
    handler: src/handlers/serviceHandler.getServiceById
    events:
      - http:
          path: service/{id}
          method: get
          cors: true

  deleteService:
    handler: src/handlers/serviceHandler.deleteService
    events:
      - http:
          path: service/{id}
          method: delete
          cors: true

  getAllServices:
    handler: src/handlers/serviceHandler.getAllServices
    events:
      - http:
          path: services
          method: get
          cors: true